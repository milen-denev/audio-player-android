name: Android Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-apk:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Java (for keytool)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Android NDK (r26d)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
      - name: Install cargo-apk
        run: cargo install cargo-apk --locked
      - name: Set up signing keystore
        shell: bash
        run: |
          set -euo pipefail
          KEYPATH="$RUNNER_TEMP/release.keystore"
          if [[ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]]; then
            echo "Using provided release keystore from secrets"
            printf "%s" "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > "$KEYPATH"
            KEYSTORE_PASS='${{ secrets.ANDROID_KEYSTORE_PASSWORD }}'
            KEY_ALIAS='${{ secrets.ANDROID_KEY_ALIAS }}'
            KEY_PASS='${{ secrets.ANDROID_KEY_PASSWORD }}'
          else
            echo "No keystore secret provided; generating a temporary CI keystore (NOT for production)"
            KEYSTORE_PASS='android'
            KEY_ALIAS='release'
            KEY_PASS='android'
            keytool -genkeypair -v \
              -storetype PKCS12 \
              -keystore "$KEYPATH" \
              -storepass "$KEYSTORE_PASS" \
              -keypass "$KEY_PASS" \
              -alias "$KEY_ALIAS" \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=CI, OU=CI, O=CI, L=CI, S=CI, C=US"
          fi
          echo "CARGO_APK_RELEASE_KEYSTORE=$KEYPATH" >> "$GITHUB_ENV"
          echo "CARGO_APK_RELEASE_KEYSTORE_PASSWORD=$KEYSTORE_PASS" >> "$GITHUB_ENV"
          echo "CARGO_APK_RELEASE_KEY_ALIAS=$KEY_ALIAS" >> "$GITHUB_ENV"
          echo "CARGO_APK_RELEASE_KEY_PASSWORD=$KEY_PASS" >> "$GITHUB_ENV"
      - name: Add Android Rust targets
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi
      - name: Build release APK
        env:
          # Align all common NDK env vars to the installed NDK to avoid mismatches
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          # Prefer ANDROID_HOME to silence deprecation warnings from cargo-apk
          if [ -n "${ANDROID_SDK_ROOT:-}" ]; then
            export ANDROID_HOME="${ANDROID_HOME:-$ANDROID_SDK_ROOT}"
            unset ANDROID_SDK_ROOT
          fi
          cargo apk build --example android_main --features android-entry --release
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            **/*.apk
          if-no-files-found: error

  release:
    needs: [build-apk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/android-apk/**/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}